---
AWSTemplateFormatVersion: 2010-09-09

Description: Amazon EFS Scale-out tutorial - Creates Amazon EC2 spot fleet that downloads S3 objects in parallel to Amazon EFS

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: File System Parameters
      Parameters:
        - ElasticFileSystem
    - Label:
        default: EC2 Parameters
      Parameters:
        - FleetSize
        - SpotPrice
        - KeyName
        - SecurityGroup
        - InstanceType0
        - PublicSubnet0
        - PublicSubnet1
    ParameterLabels:
      ElasticFileSystem:
        default: Amazon EFS File System
      FleetSize:
        default: Size of spot fleet
      InstanceType0:
        default: Instance Type 0
      SpotPrice:
        default: Spot price
      KeyName:
        default: Existing Key Pair
      PublicSubnet0:
        default: Public Subnet for AZ 0
      PublicSubnet1:
        default: Public Subnet for AZ 1
      SecurityGroup:
        default: Security Group

Parameters:

  ElasticFileSystem:
    AllowedPattern: ^(fs-)([a-z0-9]{8})$
    Description: The Amazon EFS file system id.
    Type: String
  SpotPrice:
    Description: Amazon EC2 spot price.
    Type: String
    Default: 1.50
  FleetSize:
    Default: 10
    Description: The Amazon EFS file system id.
    Type: Number
  KeyName:
    ConstraintDescription: Must be letters (upper or lower), numbers, and special characters.
    Description: Name of an EC2 KeyPair. Your EC2 instances will launch with this KeyPair.
    Type: AWS::EC2::KeyPair::KeyName
  InstanceType0:
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - p2.xlarge
      - p2.8xlarage
      - p2.16xlarge
      - g3.4xlarge
      - g3.8xlarge
      - g3.16xlarge
      - f1.2xlarge
      - f1.16xlarge
      - x1.16xlarge
      - x1.32xlarge
    ConstraintDescription: Must be a valid Amazon EC2 instance type.
    Default: r4.large
    Description: The Amazon EC2 instance type for the Amazon EC2 spot fleet.
    Type: String
  SecurityGroup:
    Description: Select the EC2 security group that allows SSH access to the instance and NFS access to the EFS file system.
    Type: AWS::EC2::SecurityGroup::Id
  PublicSubnet0:
    Description: Select an existing public subnet for AZ 0.
    Type: AWS::EC2::Subnet::Id
  PublicSubnet1:
    Description: Select an existing public subnet for AZ 1.
    Type: AWS::EC2::Subnet::Id

Mappings:

  RegionMap:
    ap-northeast-1:
      AMI: ami-2a69be4c
    ap-northeast-2:
      AMI: ami-9bec36f5
    ap-south-1:
      AMI: ami-4fc58420
    ap-southeast-1:
      AMI: ami-0797ea64
    ap-southeast-2:
      AMI: ami-8536d6e7
    ca-central-1:
      AMI: ami-fd55ec99
    eu-central-1:
      AMI: ami-c7ee5ca8
    eu-west-1:
      AMI: ami-acd005d5
    eu-west-2:
      AMI: ami-1a7f6d7e
    sa-east-1:
      AMI: ami-f1344b9d
    us-east-1:
      AMI: ami-8c1be5f6
    us-east-2:
      AMI: ami-c5062ba0
    us-west-1:
      AMI: ami-02eada62
    us-west-2:
      AMI: ami-e689729e
    cn-north-1:
      AMI: ami-0242c2cc3f754a0e9
    cn-northwest-1:
      AMI: ami-092f6b245ac648728

Resources:

  SpotFleet:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !GetAtt [FleetRole, Arn]
        SpotPrice: !Ref SpotPrice
        TargetCapacity: !Ref FleetSize
        LaunchSpecifications:
        - EbsOptimized: true
          InstanceType: !Ref InstanceType0
          ImageId: !FindInMap [ RegionMap, !Ref 'AWS::Region', AMI ]
          Monitoring:
            Enabled: true
          SecurityGroups:
            - GroupId: !Ref SecurityGroup
          SubnetId:
            !Ref PublicSubnet0
          IamInstanceProfile:
            Arn: !GetAtt [InstanceProfile, Arn]
          KeyName: !Ref KeyName
          WeightedCapacity: 1
          UserData:
              "Fn::Base64":
                !Sub |
                  #cloud-config
                  repo_update: true
                  repo_upgrade: all

                  packages:
                  - parallel

                  write_files: 
                  - content: |
                      #!/bin/bash -xe

                      # get instance-id, availability-zone, and region from intance metadata
                      instanceid=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                      availabilityzone=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
                      region=${!availabilityzone:0:-1}

                      cd /${ElasticFileSystem}/lidar/${!instanceid}

                      # create threads variable
                      threads=$(($(nproc --all) * 8))

                      aws ec2 create-tags --resources ${!instanceid} --tags "Key=Name,Value=Scale-out Tutorial parallel s3 cp (waiting)" --region ${!region}
                      
                      # create a list of objecst to get
                      aws s3api list-objects --bucket dc-lidar-2015 --output text --query 'Contents[].{Key:Key}|[?contains(Key, `.las`) == `true`]|[?contains(Key, `.lasx`) == `false`]' | awk '{print "s3://dc-lidar-2015/" $1}' > /tmp/${ElasticFileSystem}-dc-lidar-2015.txt

                      aws ec2 create-tags --resources ${!instanceid} --tags "Key=Name,Value=Scale-out Tutorial parallel s3 cp (running)" --region ${!region}

                      # get the s3 objects in parallel
                      sudo cat /tmp/${ElasticFileSystem}-dc-lidar-2015.txt | parallel --will-cite -j ${!threads} 'aws s3 cp {} .; grep -o ".\{8\}$"'

                      aws ec2 create-tags --resources ${!instanceid} --tags "Key=Name,Value=Scale-out Tutorial parallel s3 cp (complete)" --region ${!region}

                    path: /tmp/scale-out-tutorial-get-lidar-data.sh
                    permissions: 0777

                  runcmd:
                  # set variables
                  - instanceid=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                  - availabilityzone=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
                  - region=${!availabilityzone:0:-1}

                  # installs
                  - yum --enablerepo=epel install nload -y

                  # make directories and mount file system
                  - mkdir -p /${ElasticFileSystem}
                  - chown ec2-user:ec2-user /${ElasticFileSystem}
                  - echo "${ElasticFileSystem}.efs.${!region}.amazonaws.com:/ /${ElasticFileSystem} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" | sudo tee /etc/fstab
                  - mount -a -t nfs4
                  - mkdir -p /${ElasticFileSystem}/lidar/${!instanceid}

                  # tag the instance
                  - aws ec2 create-tags --resources ${!instanceid} --tags "Key=Name,Value=Scale-out Tutorial" --region ${!region}
        - EbsOptimized: true
          InstanceType: !Ref InstanceType0
          ImageId: !FindInMap [ RegionMap, !Ref 'AWS::Region', AMI ]
          Monitoring:
            Enabled: true
          SecurityGroups:
            - GroupId: !Ref SecurityGroup
          SubnetId:
            !Ref PublicSubnet1
          IamInstanceProfile:
            Arn: !GetAtt [InstanceProfile, Arn]
          KeyName: !Ref KeyName
          WeightedCapacity: 1
          UserData:
              "Fn::Base64":
                !Sub |
                  #cloud-config
                  repo_update: true
                  repo_upgrade: all

                  packages:
                  - parallel

                  write_files: 
                  - content: |
                      #!/bin/bash -xe

                      # get instance-id, availability-zone, and region from intance metadata
                      instanceid=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                      availabilityzone=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
                      region=${!availabilityzone:0:-1}

                      cd /${ElasticFileSystem}/lidar/${!instanceid}

                      # create threads variable
                      threads=$(($(nproc --all) * 8))

                      aws ec2 create-tags --resources ${!instanceid} --tags "Key=Name,Value=Scale-out Tutorial parallel s3 cp (waiting)" --region ${!region}
                      
                      # create a list of objecst to get
                      aws s3api list-objects --bucket dc-lidar-2015 --output text --query 'Contents[].{Key:Key}|[?contains(Key, `.las`) == `true`]|[?contains(Key, `.lasx`) == `false`]' | awk '{print "s3://dc-lidar-2015/" $1}' > /tmp/${ElasticFileSystem}-dc-lidar-2015.txt

                      aws ec2 create-tags --resources ${!instanceid} --tags "Key=Name,Value=Scale-out Tutorial parallel s3 cp (running)" --region ${!region}

                      # get the s3 objects in parallel
                      sudo cat /tmp/${ElasticFileSystem}-dc-lidar-2015.txt | parallel --will-cite -j ${!threads} 'aws s3 cp {} .; grep -o ".\{8\}$"'

                      aws ec2 create-tags --resources ${!instanceid} --tags "Key=Name,Value=Scale-out Tutorial parallel s3 cp (complete)" --region ${!region}

                    path: /tmp/scale-out-tutorial-get-lidar-data.sh
                    permissions: 0777

                  runcmd:
                  # set variables
                  - instanceid=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                  - availabilityzone=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
                  - region=${!availabilityzone:0:-1}

                  # installs
                  - yum --enablerepo=epel install nload -y

                  # make directories and mount file system
                  - mkdir -p /${ElasticFileSystem}
                  - chown ec2-user:ec2-user /${ElasticFileSystem}
                  - echo "${ElasticFileSystem}.efs.${!region}.amazonaws.com:/ /${ElasticFileSystem} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" | sudo tee /etc/fstab
                  - mount -a -t nfs4
                  - mkdir -p /${ElasticFileSystem}/lidar/${!instanceid}

                  # tag the instance
                  - aws ec2 create-tags --resources ${!instanceid} --tags "Key=Name,Value=Scale-out Tutorial" --region ${!region}
  FleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - spotfleet.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws-cn:iam::aws:policy/service-role/AmazonEC2SpotFleetAutoscaleRole
      - arn:aws-cn:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
      Path: /
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref InstanceRole
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com.cn
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws-cn:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: /
      Policies:
      - PolicyName: efs-scale-out-tutorial
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - ec2:CreateTags
              - ec2:DescribeAvailabilityZones
              - ec2:DescribeNetworkInterfaceAttribute
              - ec2:DescribeNetworkInterfaces
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSubnets
              - ec2:DescribeVpcAttribute
              - ec2:DescribeVpcs
              - elasticfilesystem:Describe*
              - kms:ListAliases
            Resource: '*'
